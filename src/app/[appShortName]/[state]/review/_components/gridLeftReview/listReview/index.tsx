"use client";

import { resetState } from "@/redux/features/game";
import { useAppDispatch } from "@/redux/hooks";
import clsx from "clsx";
import React, { Fragment, useCallback, useContext } from "react";
import { ISelectReview, ReviewContext } from "../../context";
import { db } from "@/db/db.model";
import { toast } from "react-toastify";

const ListReview = ({ isMobile }: { isMobile: boolean }) => {
    const {
        setSelectType,
        selectType,
        setIsStart,
        setIsOpenSheet,
        setIsShowList,
        isShowList,
    } = useContext(ReviewContext);
    const dispatch = useAppDispatch();
    const handleSelectType = useCallback(
        async (type: ISelectReview) => {
            if (type === "saved") {
                const list = await db?.useActions
                    .filter((item) => item.actions?.includes("save"))
                    .toArray();
                if (list?.length === 0) {
                    toast.info(
                        "You haven't added any questions to your saved list, try adding some then practice more."
                    );
                    return;
                }
            }
            if (type === "weak") {
                const list = await db?.userProgress.limit(50).toArray();

                const hasWeakQuestions = list?.some((item) =>
                    item.selectedAnswers?.some((answer) => !answer.correct)
                );

                if (!hasWeakQuestions) {
                    toast.info(
                        "It seems that you're doing well, there are no weaknesses to address."
                    );
                    return;
                }
            }
            dispatch(resetState());
            if (isMobile && (type === "random" || type === "hard")) {
                setIsOpenSheet(true);
            }

            if (
                isMobile &&
                (type === "all" || type === "weak" || type === "saved")
            ) {
                setIsShowList(false);
            }
            setSelectType(type);
            setIsStart(false);
        },
        [
            dispatch,
            setSelectType,
            isMobile,
            setIsShowList,
            setIsOpenSheet,
            setIsStart,
        ]
    );
    if (!isShowList) return null;
    return (
        <Fragment>
            <p className="text-xl pt-2 sm:pt-0 text-center sm:text-start font-semibold">
                Review
            </p>
            <div className="flex flex-col gap-3">
                <ItemCard
                    icon={<IconRandomQuestion />}
                    title="Random Questions"
                    des="Select questions randomly from the question bank."
                    bg="#BAE8DB"
                    type="random"
                    selectType={selectType}
                    handleSelectType={handleSelectType}
                />{" "}
                <ItemCard
                    icon={<IconWeakQuestion />}
                    title="Weak Questions"
                    des="Retake missed questions to improve your score."
                    bg="#FFC7C7"
                    handleSelectType={handleSelectType}
                    selectType={selectType}
                    type="weak"
                />{" "}
                <ItemCard
                    icon={<IconHardQuestion />}
                    title="Hard Questions"
                    des="Practice commonly answered incorrectly questions."
                    handleSelectType={handleSelectType}
                    bg="#D3F7FF"
                    selectType={selectType}
                    type="hard"
                />{" "}
                <ItemCard
                    icon={<IconSavedQuestion />}
                    title="Saved Questions"
                    des="Practice saved questions from lessons."
                    bg="#FEEDD5"
                    handleSelectType={handleSelectType}
                    selectType={selectType}
                    type="saved"
                />{" "}
                <ItemCard
                    icon={<IconAnsweredQuestion />}
                    title="All Answered Questions"
                    des="Revisit all questions you have previously attempted."
                    bg="#DEEBFF"
                    handleSelectType={handleSelectType}
                    type="all"
                    selectType={selectType}
                />
            </div>
        </Fragment>
    );
};

export default ListReview;

type IItemCard = {
    icon: React.ReactNode;
    title: string;
    des: string;
    bg: string;
    type: ISelectReview;
    handleSelectType: (e: ISelectReview) => void;
    selectType: ISelectReview;
};
const ItemCard: React.FC<IItemCard> = ({
    handleSelectType,
    icon,
    title,
    des,
    bg,
    type,
    selectType,
}) => {
    return (
        <div
            className={clsx(
                "p-4 rounded-xl flex gap-3 cursor-pointer  bg-white border border-solid ",
                {
                    "border-[#FC5656]": selectType === type,
                }
            )}
            style={{
                boxShadow: "0px 2px 4px 0px #2121211F",
            }}
            onClick={() => handleSelectType(type)}
        >
            <div
                className="rounded-2xl p-3 flex items-center justify-center"
                style={{
                    background: bg,
                }}
            >
                <div className="w-[38px] h-[38px] flex items-center justify-center">
                    {icon}
                </div>
            </div>
            <div className="flex-1 flex flex-col overflow-hidden justify-between">
                <p className="text-base font-medium w-full truncate">{title}</p>
                <p className="text-xs font-normal text-[#21212199] line-clamp-2">
                    {des}
                </p>
            </div>
        </div>
    );
};

const IconRandomQuestion = () => {
    return (
        <svg
            width="38"
            height="25"
            viewBox="0 0 38 25"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <path
                d="M30.5174 18.7481C30.6267 18.7368 30.7172 18.6497 30.7172 18.5399V16.8072C30.7172 16.5215 31.0265 16.343 31.2739 16.4858L34.3586 18.2668L37.4435 20.0478C37.6909 20.1906 37.6909 20.5477 37.4435 20.6906L34.3586 22.4715L31.2739 24.2525C31.0265 24.3953 30.7172 24.2168 30.7172 23.9311V22.3961C30.7172 22.1766 30.5219 22.0059 30.3031 22.0243C20.5772 22.8432 18.3504 17.6174 16.0805 12.2864C14.0664 7.5565 12.0087 2.72396 1.85869 4.2439C0.971479 4.37364 0.147035 3.75958 0.017298 2.87237C-0.112439 1.98507 0.501621 1.16063 1.38883 1.03089C14.0082 -0.858885 16.5637 5.14251 19.0649 11.0164C20.9028 15.3328 22.7042 19.5631 30.5174 18.7481Z"
                fill="#2B4E44"
            />
            <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M1.38883 24.2195C11.7893 25.777 15.3535 21.9744 17.6856 17.3008C17.7084 17.255 17.7059 17.2006 17.6793 17.1569C17.0272 16.0858 16.4888 14.9383 15.9862 13.7874C15.9345 13.669 15.7652 13.6705 15.7114 13.7879C12.8064 20.1261 9.85407 22.2038 1.85869 21.0064C0.971479 20.8767 0.147035 21.4908 0.017298 22.378C-0.112439 23.2653 0.501621 24.0897 1.38883 24.2195Z"
                fill="#2B4E44"
            />
            <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M34.3584 6.98323L37.4431 5.20225C37.6905 5.05941 37.6905 4.70233 37.4431 4.55949L34.3584 2.77852L31.2736 0.997536C31.0262 0.854703 30.717 1.03325 30.717 1.31891V2.85391C30.717 3.0734 30.5249 3.24445 30.3062 3.226C23.7438 2.67264 20.5951 4.87068 18.5436 7.99633C18.5153 8.03959 18.5118 8.09462 18.534 8.14132C18.9442 9.00109 19.318 9.87932 19.689 10.7505C19.7982 11.0071 19.9085 11.2673 20.0214 11.5291C20.0713 11.6448 20.2338 11.649 20.2917 11.5371C21.9418 8.34513 24.367 5.86042 30.5172 6.50197C30.6264 6.51323 30.717 6.60035 30.717 6.71019V8.44283C30.717 8.7285 31.0262 8.90704 31.2736 8.76421L34.3584 6.98323Z"
                fill="#2B4E44"
            />
        </svg>
    );
};

const IconWeakQuestion = () => {
    return (
        <svg
            width="19"
            height="31"
            viewBox="0 0 19 31"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <path
                d="M11.5705 29.2106C11.5043 29.528 11.3497 29.819 11.1252 30.0485C10.9008 30.278 10.6162 30.4361 10.3058 30.5037C9.27645 30.6654 8.22895 30.6654 7.19957 30.5037C6.88912 30.4362 6.60445 30.2781 6.38002 30.0486C6.15558 29.8191 6.00099 29.528 5.93494 29.2106C5.77549 28.1577 5.77549 27.086 5.93494 26.0331C6.00099 25.7157 6.15558 25.4246 6.38002 25.1951C6.60445 24.9656 6.88912 24.8075 7.19957 24.74C8.22895 24.5783 9.27645 24.5783 10.3058 24.74C10.6168 24.8079 10.9017 24.9666 11.1262 25.1969C11.3507 25.4272 11.505 25.7191 11.5705 26.0372C11.7299 27.0901 11.7299 28.1618 11.5705 29.2146V29.2106ZM17.6375 12.5194C16.8681 13.6322 15.7151 14.6482 14.009 15.7152C11.8495 17.0766 11.5037 17.6361 11.5037 18.7316V19.1647C11.5107 19.5392 11.4445 19.9113 11.3092 20.2593C11.1739 20.6074 10.9721 20.9243 10.7156 21.1917C10.4591 21.459 10.153 21.6714 9.81528 21.8163C9.47757 21.9613 9.11498 22.036 8.74871 22.036C8.38245 22.036 8.01986 21.9613 7.68215 21.8163C7.34443 21.6714 7.03837 21.459 6.78186 21.1917C6.52535 20.9243 6.32353 20.6074 6.18821 20.2593C6.05288 19.9113 5.98677 19.5392 5.99374 19.1647V18.1609C5.99374 16.8688 6.30964 15.7723 6.9594 14.8092C7.58922 13.8758 8.53396 13.0463 9.93312 12.1954C12.5132 10.6433 12.9856 9.77205 12.9856 8.61542C12.9856 7.16225 11.7748 6.22268 9.89625 6.22268C7.84434 6.22268 6.50796 7.17651 5.92498 9.05871C5.73608 9.66422 5.36286 10.1921 4.8598 10.5654C4.35674 10.9387 3.75017 11.1377 3.12864 11.1335C3.05689 11.1335 2.98414 11.1335 2.91339 11.1254C2.46688 11.0932 2.03347 10.9571 1.64625 10.7275C1.25903 10.4979 0.928227 10.1809 0.67911 9.80058C0.430211 9.42708 0.26813 9.00032 0.205258 8.55293C0.142387 8.10554 0.180391 7.64938 0.316364 7.21931C0.914279 5.25947 2.14058 3.56284 3.79733 2.40325C5.46756 1.23949 7.57726 0.625 9.89625 0.625C12.3049 0.625 14.5402 1.41069 16.1905 2.83737C17.8896 4.30481 18.8244 6.32968 18.8244 8.53797C18.8294 10.0564 18.4397 11.3628 17.6375 12.5194Z"
                fill="#FC5656"
            />
        </svg>
    );
};

const IconHardQuestion = () => {
    return (
        <svg
            width="32"
            height="30"
            viewBox="0 0 32 30"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <path
                d="M15.1036 1.60813C15.4705 0.864966 16.5302 0.864966 16.897 1.60813L20.6604 9.23226C20.8059 9.52711 21.0871 9.73157 21.4125 9.77912L29.8299 11.0095C30.6498 11.1293 30.9766 12.1371 30.383 12.7153L24.2938 18.6462C24.0579 18.8759 23.9502 19.2071 24.0059 19.5316L25.4428 27.9091C25.5829 28.7261 24.7253 29.3491 23.9917 28.9633L16.4658 25.0054C16.1744 24.8522 15.8263 24.8522 15.5349 25.0054L8.00896 28.9633C7.27533 29.3491 6.41778 28.7261 6.5579 27.9091L7.99475 19.5316C8.05041 19.2071 7.94274 18.8759 7.70687 18.6462L1.61767 12.7153C1.02408 12.1371 1.35086 11.1293 2.17078 11.0095L10.5882 9.77912C10.9135 9.73157 11.1947 9.52711 11.3403 9.23226L15.1036 1.60813Z"
                fill="#2C9CB5"
                stroke="#2C9CB5"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
            />
        </svg>
    );
};

const IconSavedQuestion = () => {
    return (
        <svg
            width="38"
            height="39"
            viewBox="0 0 38 39"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <path
                d="M26.6318 3.64893H11.3685C8.01184 3.64893 5.25684 6.40393 5.25684 9.76059V32.0698C5.25684 34.9198 7.29934 36.1231 9.801 34.7456L17.5277 30.4548C18.351 29.9956 19.681 29.9956 20.4885 30.4548L28.2152 34.7456C30.7168 36.1389 32.7593 34.9356 32.7593 32.0698V9.76059C32.7435 6.40393 30.0043 3.64893 26.6318 3.64893Z"
                fill="#FFB443"
            />
        </svg>
    );
};

const IconAnsweredQuestion = () => {
    return (
        <svg
            width="31"
            height="39"
            viewBox="0 0 31 39"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <rect y="0.625" width="30.1765" height="38" rx="4" fill="#73A8FB" />
            <path
                d="M5.51122 11.978C5.3755 11.978 5.26994 11.9428 5.19454 11.8725C5.12417 11.7971 5.08898 11.6915 5.08898 11.5558V7.08457C5.08898 6.94885 5.12417 6.8458 5.19454 6.77543C5.26994 6.70003 5.3755 6.66233 5.51122 6.66233H8.26332C8.36888 6.66233 8.44931 6.68997 8.5046 6.74527C8.5599 6.79553 8.58754 6.87093 8.58754 6.97147C8.58754 7.07703 8.5599 7.15745 8.5046 7.21275C8.44931 7.26804 8.36888 7.29569 8.26332 7.29569H5.84298V8.96203H8.09744C8.20803 8.96203 8.28846 8.98967 8.33872 9.04497C8.39402 9.10026 8.42166 9.17817 8.42166 9.27871C8.42166 9.38427 8.39402 9.46469 8.33872 9.51999C8.28846 9.57025 8.20803 9.59539 8.09744 9.59539H5.84298V11.3447H8.26332C8.36888 11.3447 8.44931 11.3723 8.5046 11.4276C8.5599 11.4829 8.58754 11.5608 8.58754 11.6613C8.58754 11.7669 8.5599 11.8473 8.5046 11.9026C8.44931 11.9529 8.36888 11.978 8.26332 11.978H5.51122ZM9.5301 12.0308C9.42957 12.0308 9.34663 12.0057 9.28128 11.9554C9.21594 11.9001 9.17824 11.8323 9.16818 11.7518C9.15813 11.6664 9.18578 11.5809 9.25112 11.4955L11.0306 9.10529V9.42197L9.34914 7.15997C9.2838 7.06949 9.25364 6.98152 9.25866 6.89607C9.26872 6.81061 9.30642 6.74275 9.37176 6.69249C9.43711 6.63719 9.51754 6.60955 9.61304 6.60955C9.69347 6.60955 9.76384 6.62965 9.82416 6.66987C9.88951 6.70505 9.95486 6.76789 10.0202 6.85837L11.483 8.86401H11.2417L12.6894 6.85837C12.7547 6.76789 12.8175 6.70505 12.8779 6.66987C12.9432 6.62965 13.0186 6.60955 13.1041 6.60955C13.2046 6.60955 13.2875 6.63719 13.3529 6.69249C13.4182 6.74275 13.4534 6.81061 13.4584 6.89607C13.4685 6.97649 13.4383 7.06446 13.368 7.15997L11.6865 9.42197V9.10529L13.4584 11.4955C13.5238 11.5809 13.5514 11.6664 13.5414 11.7518C13.5364 11.8323 13.5012 11.9001 13.4358 11.9554C13.3705 12.0057 13.285 12.0308 13.1795 12.0308C13.1041 12.0308 13.0337 12.0107 12.9683 11.9705C12.903 11.9303 12.8351 11.8674 12.7648 11.782L11.2115 9.65571H11.498L9.95234 11.782C9.887 11.8674 9.81914 11.9303 9.74876 11.9705C9.68342 12.0107 9.61053 12.0308 9.5301 12.0308ZM14.3145 12.0308C14.2139 12.0308 14.1335 12.0082 14.0732 11.9629C14.0129 11.9177 13.9777 11.8574 13.9676 11.782C13.9576 11.7066 13.9727 11.6211 14.0129 11.5256L16.0562 6.94131C16.1065 6.82067 16.1693 6.73521 16.2447 6.68495C16.3251 6.63468 16.4131 6.60955 16.5086 6.60955C16.5991 6.60955 16.682 6.63468 16.7574 6.68495C16.8379 6.73521 16.9032 6.82067 16.9535 6.94131L18.9968 11.5256C19.042 11.6211 19.0596 11.7091 19.0496 11.7895C19.0395 11.8649 19.0069 11.9252 18.9516 11.9705C18.8963 12.0107 18.8184 12.0308 18.7178 12.0308C18.6072 12.0308 18.5193 12.0032 18.4539 11.9479C18.3886 11.8926 18.3308 11.8071 18.2805 11.6915L17.7527 10.47L18.1071 10.6811H14.895L15.2419 10.47L14.7216 11.6915C14.6714 11.8121 14.6161 11.9001 14.5557 11.9554C14.4954 12.0057 14.415 12.0308 14.3145 12.0308ZM16.4935 7.52943L15.355 10.2287L15.1665 10.0478H17.8281L17.6547 10.2287L16.5086 7.52943H16.4935ZM20.2735 12.0308C20.1579 12.0308 20.0674 11.9981 20.0021 11.9328C19.9418 11.8674 19.9116 11.777 19.9116 11.6613V6.97901C19.9116 6.85837 19.9443 6.76789 20.0096 6.70757C20.075 6.64222 20.163 6.60955 20.2735 6.60955C20.3791 6.60955 20.4595 6.62965 20.5148 6.66987C20.5751 6.70505 20.6304 6.7704 20.6807 6.86591L22.6562 10.553H22.4224L24.3904 6.86591C24.4406 6.7704 24.4934 6.70505 24.5487 6.66987C24.604 6.62965 24.6844 6.60955 24.79 6.60955C24.9006 6.60955 24.986 6.64222 25.0464 6.70757C25.1067 6.76789 25.1368 6.85837 25.1368 6.97901V11.6613C25.1368 11.777 25.1067 11.8674 25.0464 11.9328C24.9911 11.9981 24.9056 12.0308 24.79 12.0308C24.6744 12.0308 24.5864 11.9981 24.5261 11.9328C24.4658 11.8674 24.4356 11.777 24.4356 11.6613V7.77071H24.6015L22.8522 11.0054C22.812 11.0808 22.7693 11.1361 22.724 11.1712C22.6788 11.2064 22.616 11.224 22.5355 11.224C22.4551 11.224 22.3898 11.2064 22.3395 11.1712C22.2892 11.131 22.244 11.0757 22.2038 11.0054L20.4394 7.76317H20.6204V11.6613C20.6204 11.777 20.5902 11.8674 20.5299 11.9328C20.4746 11.9981 20.3892 12.0308 20.2735 12.0308Z"
                fill="#DEEBFF"
            />
            <rect
                x="7.82324"
                y="16.272"
                width="17.8824"
                height="1.11765"
                rx="0.558824"
                fill="#DEEBFF"
            />
            <rect
                x="7.82324"
                y="21.8604"
                width="17.8824"
                height="1.11765"
                rx="0.558824"
                fill="#DEEBFF"
            />
            <rect
                x="7.82324"
                y="27.4482"
                width="17.8824"
                height="1.11765"
                rx="0.558824"
                fill="#DEEBFF"
            />
            <rect
                x="7.82324"
                y="33.0366"
                width="17.8824"
                height="1.11765"
                rx="0.558824"
                fill="#DEEBFF"
            />
            <circle cx="5.02953" cy="16.8308" r="0.558824" fill="#DEEBFF" />
            <circle cx="5.02953" cy="22.4192" r="0.558824" fill="#DEEBFF" />
            <circle cx="5.02953" cy="28.0071" r="0.558824" fill="#DEEBFF" />
            <circle cx="5.02953" cy="33.5954" r="0.558824" fill="#DEEBFF" />
        </svg>
    );
};
